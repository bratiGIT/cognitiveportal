/**
 * @license
 * Copyright (c) 2014, 2019, Oracle and/or its affiliates.
 * The Universal Permissive License (UPL), Version 1.0
 */
/*
 * Your customer ViewModel code goes here
 */
define(['ojs/ojcore', 'knockout', 'jquery', 'appController', 'ojs/ojmodel', 'ojs/ojmodule-element-utils','ojs/ojvalidation-base', 'ojs/ojknockouttemplateutils', 'ojs/ojcollectiondatagriddatasource', 'ojs/ojarraydataprovider','ojs/ojarraytreedataprovider','ojs/ojcollectiondataprovider', 'ojs/ojarraydatagriddatasource', 'restModule',  'ojs/ojknockout', 'ojs/ojdatagrid', 'ojs/ojvalidation-number', 'ojs/ojbutton', 'ojs/ojdialog', 'ojs/ojpopup', 'ojs/ojlistview', 'ojs/ojnavigationlist', 'ojs/ojswitcher',
 'ojs/ojcollapsible', 'ojs/ojoffcanvas', 'ojs/ojtable','ojs/ojlabel','ojs/ojgauge','ojs/ojradioset'
  ],
  function (oj, ko, $, app, Model, moduleUtils , ValidationBase, KnockoutTemplateUtils, collectionModule, ArrayDataProvider,ArrayTreeDataProvider, CollectionDataProvider,arrayModule,restModule) {

    function DataGridViewModel() {
      var self = this;
      // Below are a set of the ViewModel methods invoked by the oj-module component.
      // Please reference the oj-module jsDoc for additional information.

      //Instantiate Variables
      app.hideGlobalProgress();
      self.waitProgress = ko.observable(-1);
      self.customSvgStyle = {fill: 'url(' + document.URL + '#pattern)'};

      self.selectedItem = ko.observable("info");
      self.currentEdge = ko.observable("top");
      
      self.leadingPracticeDialogTitle = ko.observable("Leading Practices");

      self.dataGridPrgrsVisible = ko.observable(true);
      self.dataGridProgress = ko.observable(false);
      self.myObservableArray = ko.observableArray([]);
      self.dataSource = ko.observable();
      self.competencyRegionDialogTitle = ko.observable("Competency Details");
      this.selectedItemKpi = ko.observable("kpi");
      this.currentEdgeKpi = ko.observable("top");
      self.competencyName = ko.observable("");
      self.selectedCompetencyCellId = ko.observable("");
      self.selectedBizCompCellId = ko.observable("");
      self.gridPageHeader = ko.observable("Procurement Management");

      //Popup (BizComp) set Header region attributes begins
      self.selectedBizCompName = ko.observable("");
      self.selectedBizCompDesc = ko.observable("");
      self.selectedBizCompId = ko.observable("");
      var defaultHeader = "Business Component";
      self.setDialogTitle = ko.observable(defaultHeader);
      //Popup (BizComp) set Header region attributes ends

      //Popup (BizComp) Level tab addition code begins
      self.selectedCompItem = ko.observable("benchmark");
      self.compTabEdge = ko.observable("top");
      //Popup (BizComp) Level tab addition code ends

      self.setGridHeader = function(){
        switch(app.selectedDomainCode())
        {
          //Benchmark
          case "DOM001":
            self.gridPageHeader("Procurement Management"); 
            break;
          case "DOM002":
            self.gridPageHeader("Finance Management"); 
            break;
          case "DOM003": 
            self.gridPageHeader("Human Capital Management");  
            break;
          //Default Header
          default: 
          self.gridPageHeader("Procurement Management");
        }
      };
      
      /**Set Data Grid Header based on Context */
      self.setGridHeader();


      /**Leading Practices - Start*/
      self.leadingPrctseConfig = ko.observable({'view':'','viewModel':''});     
      var leadingPrctiseModLoad = Promise.all([
        moduleUtils.createView({'viewPath':'views/leadingPractices.html'}),
        moduleUtils.createViewModel({'viewModelPath':'viewModels/leadingPractices','initialize':'always'})
      ]);
      leadingPrctiseModLoad.then(
        function(values){
          self.leadingPrctseConfig({'view':values[0],'viewModel':values[1]});
        }
      );      
      /**Leading Practices - End*/

      //dakshayani changes begins
      self.currentBtn = ko.observable("classic");
      self.btnOptions = ko.observableArray([
        {id:"classic", value: "classic", btn: "Standard", cls: "sidebar_switch_button2"},
        {id:"core", value: "core", btn: "Heat Map", cls: "sidebar_switch_button1"}
      ]);
      self.selectedCoreClassic = ko.observable("classic");
      
      self.valueChangeHandler = function (event) {
        self.selectedCoreClassic = event['detail'].value;
        //Refresh datagrid on core/classic button selection
        document.getElementById("datagrid").refresh();
      };
      //dakshayani changes end

      this.bizCompDialogCloseHandler = function (event,ui) {
        //console.log(event,ui);
        $("#"+self.selectedBizCompCellId()).toggleClass("oj-selected oj-focus oj-datagrid-selected-top oj-datagrid-selected-bottom");
      }.bind(this);
      
      //dakshayani changes begins
      function ArrayDataGridDataSource(data, options) {
        this.rowHeaderKey = this._getRowHeaderFromOptions(options);
      
        if (options != null) {
          // undefined if no row header, 'm_defaultIndex' if indexed, other strings keys, numbers index of array
          this.columns = options.columns;
          //this.sortCriteria = options.initialSort;
        }
        ArrayDataGridDataSource.superclass.constructor.call(this, data);
      };

      arrayModule.ArrayCellSet.prototype.getExtent  = function(indexes)
      {
        return {'row': this._getExtentHelper(indexes, 'row'), 'column': this._getExtentHelper(indexes, 'column')};
      };                
      
      // a helper method to get the extent of a particular axis
      arrayModule.ArrayCellSet.prototype._getExtentHelper  = function(indexes, axis)
      { 
          var index = indexes[axis];
          //Get position of current col and row in extentArr
          var pos = $.inArray(indexes['column']+","+indexes['row'], self.extentArr);

          if ((index === 0 || index === 1 || index === 2 || index === 3 || index === 4 || index === 5 || index === 6) && axis == 'column')
          {
              var extent = 1;
          }
          /* else if ((index === 0 || index === 1) && axis == 'row')
          {
              var extent = 1;
          } */
          else if(axis == 'row' && pos>-1)
          {
            //console.log(self.extentValArr[pos]);
            var extent = self.extentValArr[pos];
          }
          else
          {
              var extent = 1;
          }

          var start = this._getStartIndex(indexes, axis);
          var end = start + extent - 1;
          var before = false;
          var after = false;

          var axisStart = axis == 'row' ? this.startRow : this.startCol;
          var axisEnd = axis == 'row' ? this.endRow - 1 : this.endCol - 1;

          if (start < axisStart) {
              // Need to subtract this overage from the extent
              extent -= (axisStart-start);
              before = true;
          }
          if (end > axisEnd) {
              // true extent overruns the header set--adjust it down by that much
              extent -= (end-axisEnd);
              after = true;
          }
          return {'extent':extent, 'more': {'before':before, 'after':after}};
      };

      arrayModule.ArrayCellSet.prototype._getStartIndex = function(indexes, axis)
      {
        var index = indexes[axis];
          //console.log(index, axis)
          /* if ((index === 0 || index === 1) && axis == 'column')
          {
              return 0;
          }
          if ((index === 2 || index === 3) && axis == 'row')
          {
              return 1;
          }
          if ((indexes['column'] === 3 || indexes['column'] === 4) && (indexes['row'] === 5 || indexes['row'] === 6))
          {
              return axis === 'column' ? 3 : 5;
          } */
          return index;
      };

      arrayModule.ArrayDataGridDataSource.prototype._getRowHeaderFromOptions = function (options) {
        return undefined;
      };

      function getColorsVal(avg) {
        var val = 0;
        if(avg>0 && avg<=30) val = 1;
        else if(avg>30 && avg<=60) val = 2;
        else if(avg>60 && avg<=100) val = 3;
        return val;
      }
      
      self.colsArr = [];
      self.descArr = [];
      self.scoreavgArr = [];
      self.cmptIdArr = [];
      self.extentArr = [];
      self.extentValArr = [];

      function prepareDataSourceArray(responseItems) { 
        var newDataArr = [];
        var maxLength = 0;
        for(var i in responseItems)
        {
          var cellsArr = responseItems[i].cmptnt;
          //console.log(cellsArr);
          maxLength = Math.max(maxLength, cellsArr.length);
        }
        //console.log(maxLength);
                
        for(var i=0; i<responseItems.length; i++){
          var dt = responseItems[i];
          var cdata = dt.cmptnt;
          self.colsArr.push(dt.cmptname);
          var col_arr = [];
          var arrLen = cdata.length;
          //console.log(arrLen)
          //var n = 1;
          var n = 0;
          var m = 0;
          var cLen = maxLength - arrLen;
          //console.log(maxLength+"-"+arrLen+"=>cLen="+cLen);
          //if(cLen==arrLen) n = 0;
          var v = parseInt(maxLength/arrLen).toFixed(0);
          var s = maxLength - (v * arrLen);
          for(var j=0; j<arrLen; j++)
          {
            if(arrLen<maxLength)
            {
              col_arr.push(cdata[j].val);  
              //if((j!=0 && j!=(arrLen-1) && cLen>0) || (cLen==arrLen)) 
              //console.log(j,cLen);
              //if(j!=(arrLen-1) && cLen>0 && cLen<arrLen)   //Commented for fixing Procurement CBM extents
              if(cLen>0 && cLen<=arrLen)
              {
                /* if(j==1) n = j;
                var cLen = (maxLength/arrLen).toFixed(0);
                //var eobj = {};
                for(var k=0; k<cLen-1; k++)
                {
                  if(j!=(arrLen-2))
                  { */
                    col_arr.push("");
                    cLen--;
                    self.extentArr.push(i+","+n);
                    self.extentValArr.push(2);
                    n = n + 2;
                    /* console.log("col="+i+",row="+n+",extent="+cLen);   
                    eobj[i+","+n] = cLen;
                    exArr.push(eobj);  
                    n = n + 2;
                  }
                } */
              }
              else if(cLen>arrLen)
              {
                for(var k=0; k<v-1; k++)
                {
                  col_arr.push("");
                }
                if(j!=(arrLen-1))
                {  
                  var extVal = parseInt(v);
                }
                else
                {  
                  var extVal = parseInt(v) + s;
                }
                self.extentArr.push(i+","+m);
                self.extentValArr.push(extVal);
                m = m + parseInt(v);          
              }
            }
            else
            {
              col_arr.push(cdata[j].val);    
            }
            self.descArr[cdata[j].val] = cdata[j].desc;
            self.scoreavgArr[cdata[j].val] = getColorsVal(cdata[j].scoreavg);          
            self.cmptIdArr[cdata[j].val] = cdata[j].id;      

          } // end for loop    

          if(cLen>arrLen)
          {      
            for(var k=0; k<s; k++)
            {
              col_arr.push("");
            }
          }

          newDataArr[i] = col_arr;
          //console.log(col_arr);
        }
        //console.log(newDataArr, self.colsArr, self.descArr, self.scoreavgArr, self.cmptIdArr);
        //console.log(self.extentArr, self.extentValArr);
        
        var obj = [];
        for(var k=0; k<maxLength; k++){
          var ndata = [];
          for(var i=0; i<newDataArr.length; i++)
          {  
            if(newDataArr[i][k]==undefined)
              ndata.push("");
            else
              ndata.push(newDataArr[i][k]);
          }
          obj[k] = ndata;
          //obj[self.colsArr[k]] = Object.assign({}, ndata);
        }
        //console.log(obj);
        return ko.observableArray(obj);
      }
      
      function prepareDataSource(rawcells) {
        return new arrayModule.ArrayDataGridDataSource(rawcells);
      }
      
      //--------dhrajago addition for datagrid REST service integration begins---------
      this.gridRgnDataProvider = ko.observableArray([]);
      self.cbmGridCollection = null;
      self.cbmGridServiceURL = ko.observable("http://129.150.172.40:8080/ords/portal_workspace/xxibm_portal_grid/fetchGridDataByDomain/");

      console.log("[dataGrid]:: Data Grid Service URI: " + self.cbmGridServiceURL());

      self.setGridCustomHdr = function (operation, collection, options) {
        var retObj = {};
        if (operation === 'read') {

          console.log("[dataGrid]:: Set Custom Header for Grid Service. Domain Code = "+app.selectedDomainCode())
          retObj['headers'] = {
           'DOM_CODE_VAR': app.selectedDomainCode() //"DOM001"
          };
          retObj['mimeType'] = "text/plain";
        }
        return retObj;
      };
      
      //Method to invoke the Grid REST Service
      self.prepareGridData = function () {
        self.dataGridPrgrsVisible(true);

        var cbmGridModel = oj.Model.extend({
          idAttribute: 'cmptid'
        });

        self.cbmGridCollection = oj.Collection.extend({
          url: self.cbmGridServiceURL(),
          customURL: self.setGridCustomHdr,
          model: cbmGridModel,
          comparator: "cmptid",
          // sync: self.cbmDataGridCollSync
        });

        self.cbmGridDataSource = new self.cbmGridCollection();

        console.log("[dataGrid]:: Grid REST :: Next to call fetch collection");
        //Call FetchMethod to load the dropdown
        self.cbmGridDataSource.fetch().then(
          function (success) {
            console.log("[dataGrid]::Successful Fetch ==>");
            console.log(success.items);
            
            self.myObservableArray(prepareDataSourceArray(success.items));
            self.dataSource(prepareDataSource(self.myObservableArray()));
            //console.log(self.dataSource());
            self.dataGridPrgrsVisible(false);
            self.dataGridProgress(true);
          },
          function (failure) {
            console.log("[dataGrid]:Failure while fetching Grid Data");
            console.log(failure);
          }
        );
      };

      self.prepareGridData();
      //--------dhrajago addition for datagrid REST service integration ends-----------

      this.columnHeaderStyle = function(headerContext) 
      {
          var column = headerContext['key'];
          /* if (column == 5)
          {
              return 'width:190px;height:50px; background:linear-gradient(to bottom,#0041BF,95%, #052EA1);font-size:12px;font-weight:bold;color:white;text-align:center;';
              return 'width:150px;height:50px; background:linear-gradient(#0043CE, #002D9C);font-size:11px;font-weight:bold;color:white;text-align:center;';
              return 'width:150px;height:50px; background:linear-gradient(#535a5a, #2b2b2b);font-size:11px;font-weight:bold;color:white;text-align:center;';
              return 'width:150px;height:50px; background:#4D5358;font-size:11px;font-weight:bold;color:white;text-align:center;';
          } */
          return 'width:150px;height:50px; background:#697077;font-size:11px;font-weight:bold;color:white;text-align:center;';
      };

      this.columnHeaderRenderer = function(headerContext)
      {
        var columnName = self.colsArr[headerContext['index']];
        var container = document.createElement('span');
        container.addEventListener("click", handleCompetencyHeaderClick);
        container.appendChild(document.createTextNode(columnName));
        return {'insert':container}
      }
      function handleCompetencyHeaderClick() {
        document.getElementById('competencyDrilldownDialog').open();
      }
      
      this.rowHeaderStyle = function(headerContext) 
      {
          var row = headerContext['key'];
          return 'width:150px;height:50px;background-color:#b3b3b3;font-size:12px;font-weight:bold;text-align:center;';
      };

      this.rowHeaderRenderer = function(headerContext) {
        //console.log(headerContext);
        var value = headerContext['data'];
        if(headerContext['index']==1 || headerContext['index']==2 || headerContext['index']==3 || headerContext['index']==5 || headerContext['index']==6 || headerContext['index']==7 || headerContext['index']==8 || headerContext['index']==9 || headerContext['index']==11 || headerContext['index']==12 || headerContext['index']==13 || headerContext['index']==14 || headerContext['index']==15) {
          value = "";
        }
        var container = document.createElement('div');
        container.className = 'demo-content-container';
        container.appendChild(document.createTextNode(value));

        return {'insert':container}
     };
  
      this.cellClassName = function(cellContext) 
      {
          var data = cellContext['data'];
          //console.log(self.scoreavgArr[data]);
          //console.log(document.getElementById('btnSwitch').value);
          var classSelected = document.getElementById('btnSwitch').value;
          //Common Classes
          var commmonClassList = "oj-sm-justify-content-center oj-sm-align-items-center oj-helper-justify-content-center";
          //Classic (or) Standard Grid CSS
          var classicDataGridClass = "classic-datagrid ";
          //Core (or) Heat Map Grid CSS
          var coreDataGridClass = "core-datagrid ";
          //Core (or) Heat Map Grid - Low CSS
          var coreDataGridLowClass = "core-datagrid-low ";
          //Core (or) Heat Map Grid - Med CSS
          var coreDataGridMedClass = "core-datagrid-med ";
          //Core (or) Heat Map Grid - High CSS
          var coreDataGridHighClass = "core-datagrid-high ";          

          if (classSelected=="core")
          {
            if(self.scoreavgArr[data]==1)
            {
              return coreDataGridLowClass+ coreDataGridClass + commmonClassList;
            }
            else if(self.scoreavgArr[data]==2)
            {
              return coreDataGridMedClass + coreDataGridClass + commmonClassList;
            }
            else if(self.scoreavgArr[data]==3)
            {
              return coreDataGridHighClass + coreDataGridClass + commmonClassList;
            }
            else
            {
              return coreDataGridClass + commmonClassList;
            }
          }
          if (classSelected=="classic")
          {
            return classicDataGridClass + commmonClassList;
          }
      }
      this.cellColorHighlight = function(cellContext) 
      {
          var column = cellContext['keys']['column'];
          //console.log(cellContext);
          //var context = document.getElementById("datagrid").getContextByNode("oj-datagrid-cell");
          //console.log(cellContext);
          /*
          if (column === 'L2PROCESS1')
          {
              return 'background-color: #ccccff';
          }
          else if (column == 'L2PROCESS6')
          {
              return 'background-color: #e6ecff';
          }
          else if (column == 'L2PROCESS7')
          {
              return 'background-color: #ccffcc';
          }
          */
          //$('div#ui-id-19').css('height','90px');
          /* var num = 500/6;
          var ht = num.toFixed(0);              
          if (cellContext['indexes']['row'] === 0  && cellContext['indexes']['column']=== 1)
          {
              //console.log(ht);
              return 'max-height:'+ht+'px;font-size:10px;text-align:center;font-weight:bold;color:#054ADA;';
          }
          else if(cellContext['data']=="")
          {
            return 'display:none;'
          } 
          else {*/
            //return 'background-color:#e6ecff;height:40px;font-size:10px;text-align:center;font-weight:bold;';
            return 'width:150px;height:50px;font-size:10px;font-weight:bold;text-align:center;';
          //}
      }   
      this.popOutSelection = function(cellContext)
      {
        //console.log(cellContext.target);
        if(cellContext.detail.value!=undefined)
        {
          var d = cellContext.detail.value.indexes;
          if (cellContext.detail.value.type=='cell' && d.row === 0  && d.column=== 3)
          {
            return 'background-color:blue;'
          }
        }
      }
      this.cellRenderer = function(cellContext)
      {
        var container = document.createElement('div');
        container.className = 'cell-div-container';
        var data = cellContext['data'];
        var sourceCellId = cellContext['parentElement'].id;
        container.addEventListener("click", function(){
          handleComponentCellClick(data,sourceCellId);
        }, false);
        container.appendChild(document.createTextNode(data));
        return {'insert':container};
      }

      function handleComponentCellClick(data,sourceCellId) {
        //console.log(sourceCellId);
        self.selectedBizCompCellId(sourceCellId);
        self.selectedBizCompName(data);
        self.selectedBizCompDesc(self.descArr[data]);
        self.selectedBizCompId(self.cmptIdArr[data]);
        //console.log("[dataGrid]:Selected BizCompId = "+self.selectedBizCompId());

        //Instantiate Module Creation on Cell Click
        self.bizCompKpiModuleCreate();
        self.bizCompCntrlModuleCreate();
        self.bizCompAssetModuleCreate();

        document.getElementById('bizCompDialog').open();
      }
      //dakshayani changes end

      /**Grid Side Panel Data Module- Start*/
      self.gridSidePanelConfig = ko.observable({'view':'','viewModel':''});     
      var gridSidePanelModLoad = Promise.all([
        moduleUtils.createView({'viewPath':'views/gridSidePanel.html'}),
        moduleUtils.createViewModel({'viewModelPath':'viewModels/gridSidePanel','initialize':'always'})
      ]);
      gridSidePanelModLoad.then(
        function(values){
          self.gridSidePanelConfig({'view':values[0],'viewModel':values[1]});
        }
      );      
      /**Grid Side Panel Data Module - End*/

      /**Business Component Benchmarks Module - Start*/
      self.cmpntBenchmarksConfig = ko.observable({'view':'','viewModel':''});
      self.bizCompKpiModuleCreate = function(){ 
        var cmpntBenchmarksModLoad = Promise.all([
          moduleUtils.createView({'viewPath':'views/componentBenchmarks.html'}),
          moduleUtils.createViewModel({'viewModelPath':'viewModels/componentBenchmarks','initialize':'always','params':{selectedBizCompId: self.selectedBizCompId()}})
        ]);
        cmpntBenchmarksModLoad.then(
          function(values){
            self.cmpntBenchmarksConfig({'view':values[0],'viewModel':values[1]});
          }
        );
      };      
      /**Business Component Benchmarks Module - End*/

      /**Business Component Controls Module - Start*/
      self.cmpntControlsConfig = ko.observable({'view':'','viewModel':''});
      self.bizCompCntrlModuleCreate = function(){ 
        var cmpntControlsModLoad = Promise.all([
          moduleUtils.createView({'viewPath':'views/componentControls.html'}),
          moduleUtils.createViewModel({'viewModelPath':'viewModels/componentControls','initialize':'always','params':{selectedBizCompId: self.selectedBizCompId()}})
        ]);
        cmpntControlsModLoad.then(
          function(values){
            self.cmpntControlsConfig({'view':values[0],'viewModel':values[1]});
          }
        );
      };      
      /**Business Component Controls Module - End*/

      /**Business Component Assets Module - Start*/
      self.cmpntAssetsConfig = ko.observable({'view':'','viewModel':''});
      self.bizCompAssetModuleCreate = function(){ 
        var cmpntAssetsModLoad = Promise.all([
          moduleUtils.createView({'viewPath':'views/componentAssets.html'}),
          moduleUtils.createViewModel({'viewModelPath':'viewModels/componentAssets','initialize':'always','params':{selectedBizCompId: self.selectedBizCompId(),svgStyle:self.customSvgStyle}})
        ]);
        cmpntAssetsModLoad.then(
          function(values){
            self.cmpntAssetsConfig({'view':values[0],'viewModel':values[1]});
          }
        );
      };      
      /**Business Component Assets Module - End*/


      /**
       * Optional ViewModel method invoked after the View is inserted into the
       * document DOM.  The application can put logic that requires the DOM being
       * attached here.
       * This method might be called multiple times - after the View is created
       * and inserted into the DOM and after the View is reconnected
       * after being disconnected.
       */      
      self.connected = function () {
        // Implement if needed
      };

      /**
       * Optional ViewModel method invoked after the View is disconnected from the DOM.
       */
      self.disconnected = function () {
        // Implement if needed
      };

      /**
       * Optional ViewModel method invoked after transition to the new View is complete.
       * That includes any possible animation between the old and the new View.
       */
      self.transitionCompleted = function () {
        // Implement if needed
      };


    }

    /*
     * Returns a constructor for the ViewModel so that the ViewModel is constructed
     * each time the view is displayed.  Return an instance of the ViewModel if
     * only one instance of the ViewModel is needed.
     */
    return new DataGridViewModel();
  }
);